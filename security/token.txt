#: Title : Token
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : Instalação e configuração de algumas ferramentas para trabalhar com token
#: Options : None
#: Reference :

#################################################################
#
# TOKEN
#
#################################################################

# pacotes necessários para a utilização do Token
#
$ yay -S opensc openct sac-core ccid pcsclite pcsc-tools pcsc-perl

# Inicializando serviços
$ sudo systemctl enable --now pcscd.service
$ sudo systemctl enable --now pcscd.socket


# SafeNet eToken 5100
#
$ sudo opensc-tool -l
# Detected readers (pcsc)
Nr.  Card  Features  Name
0    Yes             SafeNet eToken 5100 [eToken 5110 SC] 00 00

# SafeNet eToken 5100
#
$ pcsc_scan
Using reader plug'n play mechanism
Scanning present readers...
0: SafeNet eToken 5100 [eToken 5110 SC] 00 00

Thu May 20 10:17:41 2021
 Reader 0: SafeNet eToken 5100 [eToken 5110 SC] 00 00
  Event number: 0
  Card state: Card inserted, Shared Mode,
  ATR: 3B D5 18 00 81 31 FE 7D 80 73 C8 21 10 F4

ATR: 3B D5 18 00 81 31 FE 7D 80 73 C8 21 10 F4
+ TS = 3B --> Direct Convention
+ T0 = D5, Y(1): 1101, K: 5 (historical bytes)
  TA(1) = 18 --> Fi=372, Di=12, 31 cycles/ETU
    129032 bits/s at 4 MHz, fMax for Fi = 5 MHz => 161290 bits/s
  TC(1) = 00 --> Extra guard time: 0
  TD(1) = 81 --> Y(i+1) = 1000, Protocol T = 1
-----
  TD(2) = 31 --> Y(i+1) = 0011, Protocol T = 1
-----
  TA(3) = FE --> IFSC: 254
  TB(3) = 7D --> Block Waiting Integer: 7 - Character Waiting Integer: 13
+ Historical bytes: 80 73 C8 21 10
  Category indicator byte: 80 (compact TLV data object)
    Tag: 7, len: 3 (card capabilities)
      Selection methods: C8
        - DF selection by full DF name
        - DF selection by partial DF name
        - Implicit DF selection
      Data coding byte: 21
        - Behaviour of write functions: proprietary
        - Value 'FF' for the first byte of BER-TLV tag fields: invalid
        - Data unit in quartets: 2
      Command chaining, length fields and logical channels: 10
        - Logical channel number assignment: by the card
        - Maximum number of logical channels: 1
+ TCK = F4 (correct checksum)

Possibly identified card (using /usr/share/pcsc/smartcard_list.txt):
3B D5 18 00 81 31 FE 7D 80 73 C8 21 10 F4
	Bank of Lithuania Identification card
	Gemalto SafeNet eToken Java Based Cards
	https://safenet.gemalto.com/multi-factor-authentication/authenticators/pki-usb-authentication/

# Inicializar token e adicionar senha de SO PIN
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --slot 0 --init-token --label 'HSM MT4'
Using slot with ID 0x0
Please enter the new SO PIN:
Please enter the new SO PIN (again):
Token successfully initialized

#Iniciar um token é "formata-lo" com um novo nome uma nova senhas de "SO" "security officer" denominada SO_PIN
#
$ pkcs11-tool -vv --module /usr/lib/libeTPkcs11.so --slot 0 --init-token --label senhasegura_HSM

# Criar senha de login (user)
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --init-pin --slot 0
Using slot with ID 0x0
Logging in to "HSM MT4".
Please enter SO PIN:
Please enter the new PIN:
Please enter the new PIN again:
User PIN successfully initialized

#################################################################
#
# CHAVE
#
#################################################################

# Chave 1 - RSA - senha segura
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type RSA:2048 --id 01 --label cferreria@senhasegura.com.br
Using slot 0 with a present token (0x0)
Logging in to "HSM MT4".
Please enter User PIN:
Key pair generated:
Private Key Object; RSA
	label:      cferreria@senhasegura.com.br
	ID:         01
	Usage:      decrypt, sign, unwrap
	Access:     sensitive, always sensitive, never extractable, local
Public Key Object; RSA 2048 bits
	label:      cferreria@senhasegura.com.br
	ID:         01
	Usage:      encrypt, verify, wrap
	Access:     local

# Chave 2 - RSA - particular
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type RSA:2048 --id 02 --label abreuferr@gmail.com
Using slot 0 with a present token (0x0)
Logging in to "HSM MT4".
Please enter User PIN:
Key pair generated:
Private Key Object; RSA
	label:      abreuferr@gmail.com
	ID:         02
	Usage:      decrypt, sign, unwrap
	Access:     sensitive, always sensitive, never extractable, local
Public Key Object; RSA 2048 bits
	label:      abreuferr@gmail.com
	ID:         02
	Usage:      encrypt, verify, wrap
	Access:     local

# Chave 3 - EC - senha segura
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type EC:secp384r1 --id 03 --label cferreira@senhasegura.com.br
Using slot 0 with a present token (0x0)
Logging in to "HSM MT4".
Please enter User PIN:
Key pair generated:
Private Key Object; EC
	label:      cferreira@senhasegura.com.br
	ID:         03
	Usage:      decrypt, sign, unwrap, derive
	Access:     sensitive, always sensitive, never extractable, local
Public Key Object; EC  EC_POINT 384 bits
	EC_POINT:   0461045cbd34a41dee268db74c6c6ba7d5e2b21dfcd12c4d5c83ac17b29abfb17eb3526c88402ce5e6b1e227f5db8618b76060af80e7bae8c776e89be92020e30fa0de0e703f7b680d7b98c2a6ff4924189814b1fdcccf1b0e907362c3581345224b68
	EC_PARAMS:  06052b81040022
	label:      cferreira@senhasegura.com.br
	ID:         03
	Usage:      encrypt, verify, wrap, derive
	Access:     local

# Chave 4 - EC - particular
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type EC:secp384r1 --id 04 --label abreuferr@gmail.com
Using slot 0 with a present token (0x0)
Logging in to "HSM MT4".
Please enter User PIN:
Key pair generated:
Private Key Object; EC
	label:      abreuferr@gmail.com
	ID:         04
	Usage:      decrypt, sign, unwrap, derive
	Access:     sensitive, always sensitive, never extractable, local
Public Key Object; EC  EC_POINT 384 bits
	EC_POINT:   046104c23e92902ae6c4dfd3904434d8d7e6fb8dbaffb657ee64d70ff6a53e67dc318621dcde4f41d598a7f3275e5d4b84b3933547fcd151e4e4a3faba77b2a32f3a5c18179608d2f557edabe087b03cdaf4b3af20271240dbdd1267927c5db37f062d
	EC_PARAMS:  06052b81040022
	label:      abreuferr@gmail.com
	ID:         04
	Usage:      encrypt, verify, wrap, derive
	Access:     local

# Visualizar as chaves que estão armazenadas no token
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login -O
Using slot 0 with a present token (0x0)
Logging in to "HSM MT4".
Please enter User PIN:
Private Key Object; RSA
  label:      cferreria@senhasegura.com.br
  ID:         01
  Usage:      decrypt, sign, unwrap
  Access:     sensitive, always sensitive, never extractable, local
Public Key Object; RSA 2048 bits
  label:      cferreria@senhasegura.com.br
  ID:         01
  Usage:      encrypt, verify, wrap
  Access:     local

Private Key Object; RSA
  label:      abreuferr@gmail.com
  ID:         02
  Usage:      decrypt, sign, unwrap
  Access:     sensitive, always sensitive, never extractable, local
Public Key Object; RSA 2048 bits
  label:      abreuferr@gmail.com
  ID:         02
  Usage:      encrypt, verify, wrap
  Access:     local

Private Key Object; EC
  label:      cferreira@senhasegura.com.br
  ID:         03
  Usage:      decrypt, sign, unwrap, derive
  Access:     sensitive, always sensitive, never extractable, local
Public Key Object; EC  EC_POINT 384 bits
  EC_POINT:   0461045cbd34a41dee268db74c6c6ba7d5e2b21dfcd12c4d5c83ac17b29abfb17eb3526c88402ce5e6b1e227f5db8618b76060af80e7bae8c776e89be92020e30fa0de0e703f7b680d7b98c2a6ff4924189814b1fdcccf1b0e907362c3581345224b68
  EC_PARAMS:  06052b81040022
  label:      cferreira@senhasegura.com.br
  ID:         03
  Usage:      encrypt, verify, wrap, derive
  Access:     local

Private Key Object; EC
  label:      abreuferr@gmail.com
  ID:         04
  Usage:      decrypt, sign, unwrap, derive
  Access:     sensitive, always sensitive, never extractable, local
Public Key Object; EC  EC_POINT 384 bits
  EC_POINT:   046104c23e92902ae6c4dfd3904434d8d7e6fb8dbaffb657ee64d70ff6a53e67dc318621dcde4f41d598a7f3275e5d4b84b3933547fcd151e4e4a3faba77b2a32f3a5c18179608d2f557edabe087b03cdaf4b3af20271240dbdd1267927c5db37f062d
  EC_PARAMS:  06052b81040022
  label:      abreuferr@gmail.com
  ID:         04
  Usage:      encrypt, verify, wrap, derive
  Access:     local

# Visualizar as chaves p0úblicas.
#
$ ssh-keygen -D /usr/lib/libeToken.so

################################################################
#
# OPENVPN
#
#################################################################

# instalação
#
$ yay -S sac-core
$ sudo pacman -S ccid pcsclite pcsc-tools pcsc-perl openvpn libp11

# inicalizar os serviços
#
$ sudo systemctl enable --now pcscd.service
$ sudo systemctl enable --now pcscd.socket

# constatar que o computador esta reconhecendo o eToken
#
$ sudo opensc-tool -l
# Detected readers (pcsc)
Nr.  Card  Features  Name
0    Yes             SafeNet eToken 5100 [eToken 5110 SC] 00 00

# arquivo de configuração
#
# cat engine.conf
openssl_conf = openssl_init

[openssl_init]
openssl_conf = openssl_init

[openssl_init]
engines = engine_section

[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section]
engine_id = pkcs11
dynamic_path = /usr/lib/engines-1.1/libpkcs11.so
MODULE_PATH = /usr/lib/opensc-pkcs11.so
init = 0

[req]
distinguished_name = req_distinguished_name

[req_distinguished_name]

# obtendo o ID da chave RSA
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login -O
Using slot 0 with a present token (0x0)
Logging in to "HSM MT4".
Please enter User PIN:
Private Key Object; RSA
  label:      cferreria@senhasegura.com.br
  ID:         01
  Usage:      decrypt, sign, unwrap
  Access:     sensitive, always sensitive, never extractable, local
Public Key Object; RSA 2048 bits
  label:      cferreria@senhasegura.com.br
  ID:         01
  Usage:      encrypt, verify, wrap
  Access:     local

# criando o arquivo CSR utilizando a chave privada presente no using private key in HSM
#
$ openssl req -new -subj '/CN=cferreira/' -sha256 -config engine.conf -engine pkcs11 -keyform engine -key 0:01 -out filename.csr

# criando um certificado auto-assinado
#
$ openssl req -x509 -engine pkcs11 -config engine.conf -keyform engine -new -key 0:0 -sha256 -days 3650 -out filename.pem -subj "/CN=cferreira"

# converter o certificado do formato PEM para DER
#
$ openssl x509 -outform der -in filename.pem -out filename.der

# Write self-signed certificate to HSM (use same ID as private key!)
#
$ pkcs11-tool --module /usr/lib/libeToken.so -l --write-object filename.der --type cert --id changeme --label "cferreira"

################################################################
#
# OPENSSH
#
#################################################################
