#: Title : Token
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : Instalação e configuração de algumas ferramentas para trabalhar com token
#: Options : None
#: Reference :

#################################################################
#
# TOKEN
#
#################################################################

#
# Instalação e Inicialização
#

$ yay -S opensc openct sac-core ccid pcsclite pcsc-tools pcsc-perl
$ sudo systemctl enable --now pcscd.service
$ sudo systemctl enable --now pcscd.socket

#
# SafeNet eToken 5100
#

$ pkcs11-tool -vv  --module /usr/lib/libeToken.so --list-slots

#
# Inicializar token
#

# Criando o Security Office (SO)
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --slot 0 --init-token --label hsm

# Crindo o User PIN
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --init-pin --login --slot 0

# Alterando o User PIN
#
$ pkcs11-tool -vv  --module /usr/lib/libeToken.so --change-pin

#################################################################
#
# CHAVE
#
#################################################################

# Chave RSA
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type RSA:2048 --id 01 --label abreuferr_gmail_rsa

# Chave EC SECP r1
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type EC:secp384r1 --id 02 --label abreuferr_gmail_ecsecp

# Chave EC Koblitz k1
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type EC:prime256v1 --id 03 --label abreuferr_gmail_exkoblitz

# Chave AES 128
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type aes:16 --id 04 --label abreuferr_gmail_aes128 --sensitive

# Chave AES 256
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type aes:32 --id 05 --label abreuferr_gmail_aes256 --sensitive

# Visualizar as chaves que estão armazenadas no token
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login -O

# Visualizar as chaves públicas.
#
$ ssh-keygen -D /usr/lib/libeToken.so

# Apagar objetos armazenados no token
#
# (cert, privkey, pubkey, secrkey, data)
#
$ pkcs11-tool -vv  --module /usr/lib/libeToken.so --login --delete-object --id 01 --type pubkey 

#################################################################
#
# Certificado Digital
#
#################################################################

# Arquivo de configuração do OpenSSL
#
$ cat engine.conf
  openssl_conf = openssl_init

  [openssl_init]
  engines = engine_section

  [engine_section]
  pkcs11 = pkcs11_section

  [pkcs11_section]
  engine_id = pkcs11
  MODULE_PATH = /usr/lib/libeToken.so
  init = 0

  [req]
  distinguished_name = req_distinguished_name
  [req_distinguished_name]

# Gerando o CSR utilizando a chave privada RSA que esta armazenada no HSM
#
# Utilizando o arquivo "engine.conf" veja o SLOT e o ID da chave privada 
# a utilizar, no caso, Slot 0 e ID 01 - o CSR deve ser assinado pela infra
# 
$ openssl req -new -subj '/CN=abreuferr@gmail.com/' -sha256 -config engine.conf -engine pkcs11 -keyform engine -key 0:01 -out arquivo_certificado.csr

# Gerando o certificado auto-assinado
#
$ openssl req -x509 -engine pkcs11 -config engine.conf -keyform engine -new -key 0:01 -sha256 -days 3650 -out certificado_auto_assinado.pem -subj "/CN=abreuferr@gmail.com"

#
# Importar certificado para o HSM 
#

# Converter o arquivo PEM no formato DER
#
$ openssl x509 -outform der -in certificado_auto_assinado.pem -out certificado_auto_assinado.der

# Gravando o certificado no token
#
# Subir o certificado, importante que o ID seja o MESMO da chave pública 
#
$ pkcs11-tool --module /usr/lib/libeToken.so --login --write-object certificado_auto_assinado.der --type cert --id 01 --label "abreuferr_gmail.com"


# Exibir o certificado gravado no eToken
#
$ pkcs11-tool --module /usr/lib/libeToken.so --login --list-objects

Certificate Object; type = X.509 cert
  label:      cferreira@senhasegura.com
  subject:    DN: CN=cferreira
  ID:         01

# Apagar o certificado do eToken
#
$ pkcs11-tool --module /usr/lib/libeToken.so --login --delete-object --type cert --id 01

################################################################
#
# OPENVPN
#
#################################################################

# Visualizar o certificado que esta armazenados
# no eToken.

$ openvpn --show-pkcs11-ids /usr/lib/libeToken.so

The following objects are available for use.
Each object shown below may be used as parameter to
--pkcs11-id option please remember to use single quote mark.

Certificate
       DN:             CN=cferreira
       Serial:         63F4A594B2E2EA977E0757BF21002A00FE6E66DE
       Serialized id:  SafeNet\x2C\x20Inc\x2E/eToken/0271f395/HSM\x20MT4/01

$ cat client.configuração

client
dev tun
proto udp
remote <your.server.com> 2001
resolv-retry infinite
nobind
persist-key
persist-tun
ca /etc/openvpn/ca.crt
ns-cert-type server
comp-lzo
verb 3
script-security 2
up /etc/openvpn/update-resolv-conf
down /etc/openvpn/update-resolv-conf
pkcs11-providers /usr/lib/libeToken.so
pkcs11-id 'SafeNet\x2C\x20Inc\x2E/eToken/0271f395/HSM\x20MT4/01'

################################################################
#
# OPENSSH
#
#################################################################

#
# cliente
#

# configuração do cliente ssh
#
$ cat /etc/ssh/ssh_config
(...)
PKCS11Provider /usr/lib/libeToken.so

# obter a chave pública armazenada no eToken
#
# PS. utilizar chave de criptografia do tipo EC pois
# é um algoritmo de criptografia mais rápido no processo
# de criptografia/descriptografia
#
$ pkcs11-tool --module /usr/lib/libeTPkcs11.so --slot 0 --login --list-objects

# copiar a chave pública para o arquivo authorized_keys e
# esse arquivo deve ser copiado para o servidor ssh e
# deve ser copiado para o diretório .ssh
#
$ ssh-keygen -D /usr/lib/libeToken.so >> ~/.ssh/authorized_keys

# login no servidor ssh
#
$ ssh -I /usr/lib/libeToken.so cferreira@192.168.X.X