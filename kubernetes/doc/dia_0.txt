#: Title : Descomplicando o Kubernetes
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : Descomplicando o Kubernetes - treinamento jeferson fernando noronha 
#: Options : None

# topologia
#
# k0 - master - 192.168.10.50
# k1 - no1 - 192.168.10.51
# k2 - no2 - 192.168.2.52

# variavel de ambiente
#
$ cat /etc/environment
	LC_ALL=en_US.UTF-8
	LANG=en_US.UTF-8

# desativar o swap nos tres hosts
#
$ sudo swapoff -a
$ sudo vi /etc/fstab
	comentar a linha referente ao swap

# instalar o docker nos tres hosts
#
$ sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y -d
$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
$ sudo apt-get update
$ sudo apt-get install docker-ce -y -d

# instalar o kubernetes nos tres hosts
#
$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
$ sudo vi /etc/apt/sources.list.d/kubernetes.list 
	deb http://apt.kubernetes.io/ kubernetes-xenial main
$ sudo apt-get update
$ sudo apt-get install kubelet kubeadm kubectl -y -d

# ativando o kubernetes no master
#
$ sudo kubeadm init
$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

# criacao do podnetwork
#
# weave net eh um networking toolkit. essa ferramenta cria um arede virtual que tem por objetivo
# conectar os multiplos containers que estao localizados nos nos do kubernetes. Alem de conectar
# os containers, essa ferramenta permite que os mesmos sejam descobertos.
#
# essa ferramenta eh um plug-in para o kubernetes
#
$ sudo kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

# adicionando os nos no kubernetes
#
# o comando abaixo deve ser executado em todos os
# nos do kubernetes. O comando tem por objetivo o
# de adicionar o no no kubernetes
# 
$ sudo kubeadm join 192.168.10.50:6443 --token ffu2hd.iz683v47xmbuc0tc --discovery-token-ca-cert-hash sha256:092882b60b53b1381b71ba156292f30b5ab9c4636cc55327bb7731dcf5780304

# comando utilizado para exibir a linha de comando
# utilizada para adicionar um no no kubernetes.
#
$ sudo kubeadm token create --print-join-command

# exibir quais sao os integrantes do kubernetes
#
$ sudo kubectl get nodes

# comando utilizado para exibir todos os namespaces que estao presentes
# no kubernetes e em quais hosts do kubernetes eles estao localizados.
#
# o comando abaixo eira mostrar todos os namespaces e seus componentes
# se por acaso for necessario criar um filtro para um determinado namespace,
# basta alterar o parametro "--all-namespaces" pelo parametro "-n NAMESPACE"
#
$ sudo kubectl get pod -o wide --all-namespaces
	NAMESPACE     NAME                         READY     STATUS    RESTARTS   AGE       IP              NODE
	kube-system   coredns-78fcdf6894-9m9hn     1/1       Running   1          3d        10.32.0.4       k0
	kube-system   coredns-78fcdf6894-hdgdr     1/1       Running   1          3d        10.32.0.5       k0
	kube-system   etcd-k0                      1/1       Running   1          3d        192.168.10.50   k0
	kube-system   kube-apiserver-k0            1/1       Running   1          3d        192.168.10.50   k0
	kube-system   kube-controller-manager-k0   1/1       Running   1          3d        192.168.10.50   k0
	kube-system   kube-proxy-7hpvh             1/1       Running   1          3d        192.168.10.52   k2
	kube-system   kube-proxy-87n8w             1/1       Running   1          3d        192.168.10.51   k1
	kube-system   kube-proxy-h25bg             1/1       Running   1          3d        192.168.10.50   k0
	kube-system   kube-scheduler-k0            1/1       Running   1          3d        192.168.10.50   k0
	kube-system   weave-net-276cf              2/2       Running   3          3d        192.168.10.50   k0
	kube-system   weave-net-7zmwj              2/2       Running   3          3d        192.168.10.51   k1
	kube-system   weave-net-8lb9v              2/2       Running   3          3d        192.168.10.52   k2

# como obter o nome de todos os namespaces.
#
$ sudo kubectl get namespaces
	NAME          STATUS    AGE
	default       Active    4d
	kube-public   Active    4d
	kube-system   Active    4d

# descricao dos nodes do kubernetes
#
$ sudo kubectl describe node <NODE_NAME>

# INFORMACAO

# primeiro exemplo da utilizacao do kubernetes com um container
# nesse exemplo sera utilizado o nginx
#
# kubectl run <NOME_POD> --image <IMAGEM_NOME>
#
$ sudo kubectl run nginx --image nginx
	deployment.apps/nginx created

# comando utilizado para visualizar os deployments que foram
# criados.
#
$ sudo kubectl get deployment
	NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
	nginx     1         1         1            1           1m

# comando utilizado para visualizar os pods que foram criados
#
$ sudo kubectl get pods
	NAME                     READY     STATUS    RESTARTS   AGE
	nginx-64f497f8fd-tm7k8   1/1       Running   0          2m

# comando utilizado para obter mais informacoes sobre um determinado pod.
#
$ sudo kubectl describe pod nginx-64f497f8fd-tm7k8

# comando utilizado para obter mais informacoes sobre os deployments
#
$ sudo kubectl describe deployment  nginx

# YAML

# informacao no formato yaml
#
$ sudo kubectl get pod nginx-64f497f8fd-tm7k8 -o yaml

# criando um deployment atraves de um arquivo yalm e nao mais
# de forma manual.
#
$ sudo kubectl create -f meu_primeiro_deployment.yaml
	deployment.extensions/meu-primeiro.yalm created

# exibir os deployments que estao ativos
#
$ sudo kubectl get deployment
	NAME                DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
	meu-primeiro.yalm   1         1         1            1           34s
	nginx               1         1         1            1           1h

# apagando um deployment
#
$ sudo kubectl delete deployment nginx
	deployment.extensions "nginx" deleted

# apagando um deployment atraves do arquivos que foi utilizado para cria-lo
#
$ sudo kubectl delete -f meu_primeiro_deployment.yaml
	deployment.extensions "meu-primeiro.yalm" deleted

# segundo yaml com alguma alteracoes, porta
#
$ sudo kubectl create -f meu_segundo_deployment.yaml
	deployment.extensions/meu-segundo-yalm created

# exportar esse segundo deployment
#
$ sudo kubectl expose deployment meu-segundo-yalm
service/meu-segundo-yalm exposed

# exibir os servicos ativos
#
$ sudo kubectl get services
	NAME               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
	meu-segundo-yalm   ClusterIP   10.104.100.138   <none>        80/TCP    1m

# obtendo informacoes sobre os end point ativos
#
$ sudo kubectl get ep
	NAME               ENDPOINTS                                AGE
	meu-segundo-yalm   10.36.0.1:80,10.44.0.1:80,10.44.0.2:80   3m
