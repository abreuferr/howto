#: Title : dcker swarm
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : uma visao da tecnologia swarm no mundo docker
#: Options :
#: Reference :	https://lostechies.com/gabrielschenker/2016/09/05/docker-and-swarm-mode-part-1/
		https://lostechies.com/gabrielschenker/2016/09/11/docker-and-swarm-mode-part-2/
		https://lostechies.com/gabrielschenker/2016/10/05/docker-and-swarm-mode-part-3/
		https://lostechies.com/gabrielschenker/2016/10/22/docker-and-swarmkit-part-4/
		https://lostechies.com/gabrielschenker/2016/11/11/docker-and-swarmkit-part-5-going-deep/
		https://lostechies.com/gabrielschenker/2016/11/25/docker-and-swarmkit-part-6-new-features-of-v1-13

# criacao dos 5 nos do cluster
#
$ for N in 1 2 3 4 5; do docker-machine create --driver virtualbox node$N; done
$ for N in 1 2 3 4 5; do docker-machine create --driver vmwarefusion node$N; done

# visualizar os 5 nos do cluster em execucao
#
$ docker-machine ls
	NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS
	node1   -        virtualbox   Running   tcp://192.168.86.130:2376           v1.12.2
	node2   -        virtualbox   Running   tcp://192.168.86.131:2376           v1.12.2
	node3   -        virtualbox   Running   tcp://192.168.86.132:2376           v1.12.2
	node4   -        virtualbox   Running   tcp://192.168.86.133:2376           v1.12.2
	node5   -        virtualbox   Running   tcp://192.168.86.134:2376           v1.12.2

# NODE1
#
$ eval $(docker-machine env node1)

# tornando o node1 o manager do cluster
#
$ docker swarm init --advertise-addr 192.168.86.101
	Swarm initialized: current node (2k9rpce7rwpsbzab4mlr12lwe) is now a manager.
	To add a worker to this swarm, run the following command:

    	docker swarm join --token <TOKEN> 192.168.86.101:2377

	To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

# NODE2/NODE3/NODE4/NODE5
#
$ eval $(docker-machine env node2/3/4/5)
$ docker swarm join --token <TOKEN> 192.168.86.101:2377

# NODE1
#
# visualizar o token do manager
#
$ docker swarm join-token manager
	To add a manager to this swarm, run the following command:
	docker swarm join --token SWMTKN-1-5b2x10g1tywmt70rywacxfoz8upsnlm8q27ga1btsk32lkz2nt-8sgamezvj76ftu8x94nx044xv 192.168.86.130:2377

# visualizar o token do worker
#
$ docker swarm join-token worker
	To add a worker to this swarm, run the following command:
	docker swarm join --token SWMTKN-1-5b2x10g1tywmt70rywacxfoz8upsnlm8q27ga1btsk32lkz2nt-6zqmdn9q4rrcahngo6fu1mjcc 192.168.86.130:2377

# refazer o token do manager
#
$ docker swarm join-token --rotate manager

# refazer o token do worker
#
$ docker swarm join-token --rotate worker

# NODE1
#
# informacao sobre o cluster
# o node1 ficou como o node lider/master node
#
$ eval $(docker-machine env node1)
$ docker node ls
	ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
	4w5fwm113fpvm6fc99nuqllpv    node5     Ready   Active
	6kjyvj773u2e1mab36g7555bp *  node1     Ready   Active        Leader
	7l0m9ywm6cjxl5l8fo97rn773    node2     Ready   Active
	7s3a4s8ndeprntfycl2pn97ob    node4     Ready   Active
	9na1vjsfee7crg2mqf44rrkaa    node3     Ready   Active

# promovendo os hosts node2 e node3 como nodes reachable
# caso o node1 (manager) for desativado, um dos dois nodes (NODE2/NODE3) sera
# elegido como lider do cluster
#
$ docker node promote node2 node3

# converter o NODE3 como worker (MANAGER to WORKER)
#
$ docker node demote <NODE3_ID>

# informacao sobre o cluster
#
$ docker node ls
	ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
	4w5fwm113fpvm6fc99nuqllpv    node5     Ready   Active
	6kjyvj773u2e1mab36g7555bp *  node1     Ready   Active        Leader
	7l0m9ywm6cjxl5l8fo97rn773    node2     Ready   Active        Reachable
	7s3a4s8ndeprntfycl2pn97ob    node4     Ready   Active
	9na1vjsfee7crg2mqf44rrkaa    node3     Ready   Active        Reachable

# o NODE1 sera parado e outro no ira assumir a posicao de lider
# um dos nos Reachable ira se tornar lider/master
#
$ docker-machine stop node1

# NODE2
#
$ eval $(docker-machine env node2)
$ docker node ls
	ID                           HOSTNAME  STATUS   AVAILABILITY  MANAGER STATUS
	4w5fwm113fpvm6fc99nuqllpv    node5     Ready    Active
	6kjyvj773u2e1mab36g7555bp    node1     Unknown  Active        Unreachable
	7l0m9ywm6cjxl5l8fo97rn773 *  node2     Ready    Active        Reachable
	7s3a4s8ndeprntfycl2pn97ob    node4     Ready    Active
	9na1vjsfee7crg2mqf44rrkaa    node3     Ready    Active        Leader

# NODE5
#
# remover o node5 do cluster
#
$ eval $(docker-machine env node5)
$ docker swarm leave

# NODE1
#
# informacao sobre o node
#
$ docker node <NODE1_DI> --pretty
	ID:			q540kx8aneozcz6ilyitlukv0
	Labels:
	Hostname:		node1
	Joined at:		2017-04-08 12:31:30.702519036 +0000 utc
	Status:
 	State:			Ready
 	Availability:		Active
 	Address:		192.168.86.130
	Manager Status:
 	Address:		192.168.86.130:2377
 	Raft Status:		Reachable
 	Leader:		Yes
	Platform:
 	Operating System:	linux
 	Architecture:		x86_64
	Resources:
 	CPUs:			1
 	Memory:		995.7 MiB
	Plugins:
  Network:		bridge, host, macvlan, null, overlay
  Volume:		local
	Engine Version:		17.04.0-ce
	Engine Labels:
 	- provider = vmwarefusion

SERVICO

# NODE3
#
# criacao de um servico
# devido a utilizacao do parametro --replicas=3, o servico sera replicado para
# somente 03 nos do cluster
#
$ eval $(docker-machine env node3)
$ docker service create --name Web --publish 80:80 --replicas=3 nginx:latest
$ docker service ps Web
	ID                         NAME   IMAGE         NODE   DESIRED STATE  CURRENT STATE             ERROR
	cda0t56nam2gir3zhbf21etn0  Web.1  nginx:latest  node5  Running        Preparing 17 seconds ago
	cy4yh6bjo2861mvwl34a1rakn  Web.2  nginx:latest  node2  Running        Preparing 18 seconds ago
	ar7cojp2n2dh62syx6sa1e02t  Web.3  nginx:latest  node1  Running        Preparing 18 seconds ago

# atualizacao de um servico
# replicar o servico de nome Web para todos os outros nos do cluster
#
$ docker service update Web --replicas 5
$ docker service ps Web
	ID                         NAME   IMAGE         NODE   DESIRED STATE  CURRENT STATE           ERROR
	7c59nh1svkaphn70mvuhtcv9a  Web.1  nginx:latest  node1  Running        Running 18 minutes ago
	347x3xtwq6ou73ll5xo9gbxvc  Web.2  nginx:latest  node3  Running        Running 18 minutes ago
	2x1cxrf92o4ypx95vi4kv9r8x  Web.3  nginx:latest  node2  Running        Running 18 minutes ago
	6h6mwagxs2nlgu2u2xoyis505  Web.4  nginx:latest  node5  Running        Running 16 minutes ago
	6905l4jlaezlgykpnn4hcpdkg  Web.5  nginx:latest  node4  Running        Running 16 minutes ago

# parando o servico Web em todos os nos do cluster
#
$ docker service update Web --replicas 0
$ docker service ps Web
	ID                         NAME   IMAGE         NODE   DESIRED STATE  CURRENT STATE            ERROR
	7c59nh1svkaphn70mvuhtcv9a  Web.1  nginx:latest  node1  Shutdown       Shutdown 41 seconds ago
	347x3xtwq6ou73ll5xo9gbxvc  Web.2  nginx:latest  node3  Shutdown       Shutdown 41 seconds ago
	2x1cxrf92o4ypx95vi4kv9r8x  Web.3  nginx:latest  node2  Shutdown       Shutdown 41 seconds ago
	6h6mwagxs2nlgu2u2xoyis505  Web.4  nginx:latest  node5  Shutdown       Shutdown 41 seconds ago
	6905l4jlaezlgykpnn4hcpdkg  Web.5  nginx:latest  node4  Shutdown       Shutdown 41 seconds ago

# removendo o servico Web
#
$ eval $(docker-machine env node3)
$ docker service rm Web

# criacao de um novo servico desatualizado
#
$ docker service create --name nginx --publish 80:80 --replicas 3 nginx:1.10.1
$ docker service ps nginx
	ID                         NAME     IMAGE         NODE   DESIRED STATE  CURRENT STATE            ERROR
	e20uppp2irxat3wmipankx9p7  nginx.1  nginx:1.10.1  node4  Running        Preparing 9 seconds ago
	bx7eqlxfk1vmgcsd51cseizba  nginx.2  nginx:1.10.1  node1  Running        Preparing 9 seconds ago
	dnl8yui68v0vg3sio0phhvlep  nginx.3  nginx:1.10.1  node3  Running        Preparing 9 seconds ago

# atualixacao do servico
#
$ docker service update nginx --image nginx:1.11.3
$ docker service ps nginx
	ID                         NAME         IMAGE         NODE   DESIRED STATE  CURRENT STATE            ERROR
	b26lpagw383vkd8e8zywmf7hf  nginx.1      nginx:1.11.3  node2  Running        Running 44 seconds ago
	9rnimm9k2okk9eepqut3e3hiz   \_ nginx.1  nginx:1.10.1  node4  Shutdown       Shutdown 47 seconds ago
	c53g2p1cwvco7hyyaj7dvswem  nginx.2      nginx:1.11.3  node1  Running        Running 49 seconds ago
	0m12gy9es2ycqy0renkf1abta   \_ nginx.2  nginx:1.10.1  node5  Shutdown       Shutdown 50 seconds ago
	7n4pkzmcup3yn2ehnzbai0i61  nginx.3      nginx:1.11.3  node5  Running        Running 41 seconds ago
	a13bfbwc6rop3mphzad1nua72   \_ nginx.3  nginx:1.10.1  node3  Shutdown       Shutdown 43 seconds ago

# crindo um servico de forma global
#
$ docker service create --name debug --mode global alpine sleep 1000000000
$ docker service ps debug
	ID                         NAME       IMAGE   NODE   DESIRED STATE  CURRENT STATE               ERROR
	eono8afzoqfb1l7e2btv0f9ho  debug      alpine  node5  Running        Running about a minute ago
	1njmxt9b8xz6u4rwngj79algt   \_ debug  alpine  node4  Running        Running about a minute ago
	4ourrnsdi8cxvwwatiim55fw4   \_ debug  alpine  node3  Running        Running about a minute ago
	ednc1r35oi2fe31quk2mxwvao   \_ debug  alpine  node2  Running        Running about a minute ago
	2rl5ho9mkb97vunagaycq6w0n   \_ debug  alpine  node1  Running        Running about a minute ago

# para a manutencao do no do cluster, primeiramente devemos parar os servicos presentes
# nesse no para em seguida fazer a manutencao. Os servicos deste no sera transferido para
# outros nos do cluster
#
$ docker node update --availability drain node5
	node5
$ docker node ls
	ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
	6pqzm0186cwnnr6uq1tzfu05i    node4     Ready   Active
	7qhofd4fbnb8zl7pkdbg9gz60    node2     Ready   Active        Reachable
	a6f9hnlreouzrht7f29q2j9om    node3     Ready   Active        Reachable
	c5p0yk9zbsatn5fmvplqtd8gj    node5     Ready   Drain
	essv9982ydjytdb29rn5ykphf *  node1     Ready   Active        Leader

# NODE1
#
# reativando o node5
#
$ eval $(docker-machine env node1)
$ docker node update --availability active node5
	ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
	mrsxd2f24cjadvqcfgqxon3ac    node1     Ready   Active        Reachable
	sts8v52i5p6abo8p7ksh248rw    node3     Ready   Active        Reachable
	ugvoeuu20k5jgh9d9fjunlrh8    node5     Ready   Active
	wyvza7otcajvdfza8937luafv *  node2     Ready   Active        Leader
	xe3s9fl955w9cwvl44yo2hcvs    node4     Ready   Active

NETWORK

# NODE1
#
# Criacao de uma rede do tipo overlay de nome skynet
#
$ eval $(docker-machine env node1)
$ docker network create skynet --driver overlay
	bvjb1ejw514voaolgbu9wg7qs

# informacao sobre a rede que foi criada
#
$ docker network ls
	NETWORK ID          NAME                DRIVER              SCOPE
	bvjb1ejw514v        skynet              overlay             swarm

# Descoberta de Servico e Balanceamento de Carga
#
# criacao dos servicos Web1 e Web2 na rede skynet
#
$ eval $(docker-machine env node1)
$ docker service create --name Web1 --replicas 1 --network -p 5500:80 skynet nginx
	aom0hf5xiuid1fqbjal8t6mvi

$ docker service ps Web1
	ID                         NAME    IMAGE  NODE   DESIRED STATE  CURRENT STATE           ERROR
	alfkcfvwtidh94tsbtp1qlzh1  Web1.1  nginx  node4  Running        Running 37 seconds ago

$ docker service create --name Web2 --replicas 3 --network skynet --publish 8000:8000 jwilder/whoami
	4hdlzon3b5uec0izkjt82i9i8

$ docker service ps Web2
	ID                         NAME    IMAGE           NODE   DESIRED STATE  CURRENT STATE                 ERROR
	43j3cr097jsddl6o1jde0vdwr  Web2.1  jwilder/whoami  node3  Running        Preparing about a minute ago
	ax134wlhkm080kt03o02ucka5  Web2.2  jwilder/whoami  node4  Running        Preparing about a minute ago
	3uewso4rvq6yfl452dckivrnb  Web2.3  jwilder/whoami  node2  Running        Preparing about a minute ago

# NODE4
#
# o objetivo desta etapa eh o de demonstrar o nome DNS dos tres containers que foram
# criados atraves do servico Web2
#
$ eval $(docker-machine env node4)
$ docker container ls
	CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
	4f867d52e667        nginx:latest        "nginx -g 'daemon off"   2 minutes ago       Up 2 minutes        80/tcp, 443/tcp     Web1.1.alfkcfvwtidh94tsbtp1qlzh1

$ docker exec -it 4f867d52e667 /bin/bash
$ apt-get update && apt-get install -y curl
root@4f867d52e667:/# curl Web2:8000
	I'm dbd65218ee65
root@4f867d52e667:/# curl Web2:8000
	I'm ec4d7a258f06
root@4f867d52e667:/# curl Web2:8000
	I'm e75e82b680dc

# VOLUME

$ docker volume create volumedata
	volumedata

$ docker service create --name giropops2 --mount type=volume,source=volumedata,destination=/opt/giropops --network skynet -p 1234:80 nginx

# bind = diretorio e não mais volume
$ docker service create --name giropops23 --mount type=bind,source=/tmp,destination=/opt/giropops --network skynet -p 1234:80 nginx

$ docker service create --name giropops24 --constraint 'node.role == manager' nginx
$ docker service create --name giropops24 --constraint 'node.role == workers' nginx
