#: Title : git - comandos
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : Comandos do Git
#: Options :	None
#: Reference :	

#
# TAG
#

# Existe a possibilidade de colocar tags em pontos especificos no historico do
# versionamento. tags podem ser utilizadas para versionar o software, v1.0/v 1.1)

# visualizar as tags existentes
#
$ git tag

# procurar por determinadas tags
#
$ git tag -l 'v1.*'

# adicionando tag com comentario
#
$ git tag -a v1.0 -m 'versao 1.0'

#
# ADD
#

# adicionar arquivoi(s) ao staging area.
# a partir deste ponto, os arquivos adicionados serão monitorados pelo Git.
#
$ git add <arquivo>	, adiciona somente um arquivo ao repositorio
$ git add *.txt		, adiciona todos os arquivos TXT ao repositorio
$ git add --all		, adiciona todos os arquivos ao repositorio
$ git add doc/*.txt	, adicionar todos os arquivos TXT localizados no diretorio doc

#
# REMOVER ARQUIVO
#

# existe a possibilidade de remover um arquivo previamente gerenciado pelo Git.
#
$ rm <ARQUIVO>		; remover o arquivo do computador
$ git rm <ARQUIVO>	; remover o arquivo do Git

#
# MOVER ARQUIVO
#

# existe a possibilidade de mover ou renomear um arquivo previamente gerenciado
# pelo Git.
#
$ mv <ARQUIVO1>	<ARQUIVO2>	; remover o arquivo do computador
$ git mv <ARQUIVO1> <ARQUIVO2>	; remover o arquivo do Git

#
# COMMIT
#

# a funcao do comando COMMIT eh o de transferir o arquivo que acabou de ser
# alterado para a area de versionamento. A partir deste ponto, o arquivo fica
# armazenado no repositorio.
#
# depois de executar o comando "git add ..." eh necessario
# executar o comando "git commit" para adicionar um comentario
# em relacao a acao tomada que foi a de adicionar um arquivo.
#
# o comando COMMIT tambem serve para inserir um comentario e identificando
# o que foi feito no arquivo.
#
$ git commit -m "Adicionar o comentario"	;	adiciona um comentario a alteracao
$ git commit --allow-empty-message -m   ; adicionar um commit com mensagem em branco

COMMIT + ADD
# o comando abaixo equivale aos comandos
# git add ... + git commit ...
# o comando abaixo nao funciona para novos arquivos
#
$ git commit -am "Comentario"

UNDO
# Refazer o ultimo comentario do commit
#
$ git commit --amend -m "msg"	; altera o comentário do último commit

# Remover um arquivo que foi adicionado erroneamente.
#
# por exemplo, foram alteados dois aquivos, foi executado o comando "git add *"
# mas foi detectado que eh necessario adicionar um comentario para cada arquivo
# adicionado.
#
$ git reset HEAD <ARQUIVO>

# reverter a ultima alteracao/commit aplicado sobre um arquivo
#
$git checkout -- <ARQUIVO>

SERVIDOR REMOTO (GITHUB)
# visualizar os servidores remotos
#
$ git remote -v
	origin	https://github.com/abreuferr/git.git (fetch)
	origin	https://github.com/abreuferr/git.git (push)

# Fazer o clone/download do PROJETO do servidor REMOTO (GitHub)
#
$ git clone https://github.com/abreuferr/howto.git

# adicionar um repositorio remoto.
#
# git remote add [NOME_CURTO] [URL]
#
# utilizando a opcao de [NOME_CURTO], nao sera necessario utilizar a URL, basta
# utilizar o NOME_CURTO, que no exemplo abaixo se chama ORIGIN.
#
$ git remote add origin https://github.com/abreuferr/MeuProjeto.git

# o comando FETCH permite fazer o download somente dos arquivos que ainda nao
# existem no repositorio local. (REMOTO -> LOCAL)
#
# git fetch [NOME_CURTO]
#
$ git fetch origin

# o comando PUSH ira enviar os arquivo do repositorio local para o repositorio
# remoto (LOCAL -> REMOTO)
#
# git push [NOME_CURTO] [BRANCH]
#
$ git push origin master

# O comando PULL ira sincronizar o projeto que esta localizado no servidor remoto
# com o servidor local.
#
# o objetivo deste comando eh o sincronizar as alteracoes que foram
# feitas no servidor remoto com o servidor local e em seguida executar o merge
# entre as versoes dos arquivos.
#
$ git pull origin master

SERVER
# criar um servidor git particular 

# local
#
$ mkdir ~/myProject
$ cd ~/myProject
$ git init
$ echo "Projeto" > README.md
$ git add .
$ git commit

# server
#
$ ssh cosmo@gitserver.local
$ mkdir gitServer
$ cd gitServer
$ mkdir myProject
$ git init --bare
$ logout

# local
#
$ git remote add origin cosmo@gitserver.local:gitServer/myProject
$ git push --set-upstream origin master

# local
#
$ rm -rf myProject
$ git clone cosmo@gitserver.local:gitServer/myProject
