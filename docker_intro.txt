#: Title : Intro Docker
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : introducao ao mundo docker
#: Options : foi utilizado o sistema operacaional gnu/linux debian
#: Reference :

1. INSTALACAO
# alteracao no grub
#
$ sudo vi /etc/default/grub
	GRUB_CMDLINE_LINUX_DEFAULT="cgroup_enable=memory swapaccount=1"
	GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"
$ sudo update-grub
$ sudo reboot

# atualizacao do GNULinux Debian
#
$ sudo apt-get update && sudo apt-get upgrade

# instalacao do pacote sobre bridge que sera utilizado em rede
#
$ sudo apt-get install bridge-utils curl -y

# adicionando o repositorio Docker no apt
#
$ sudo apt-get install apt-transport-https ca-certificates
$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
$ sudo vi /etc/apt/sources.list.d/docker.list
	deb https://apt.dockerproject.org/repo debian-jessie main
$ sudo apt-get update
$ sudo apt-cache policy docker-engine

# instalacao do Docker
#
$ sudo apt-get install docker-engine -y -d

# inicializando o docker no systemd
#
$ sudo systemctl enable docker.service (habilitar)
$ sudo systemctl start docker.service (inicializar)
$ sudo systemctl status docker.service (status)

# adicionar o usuario ao grupo Docker para que nao seja necessario
# utilizar o sudo para poder utilizar o Docker
#
$ sudo gpasswd -a ${USER} docker
$ sudo service docker restart

2. PRIMEIROS PASSOS
# execucao do containder "hello world"
#
$ docker container run hello-world

# download e criacao de containers baseados em imagens
# no caso do ubuntu, sera criado o container baseado na
# ultima versao do ubuntu. ja o centos, sera criado o
# container baseado na versao 7 do centos.
#
$ docker container run -ti ubuntu
$ docker container run -ti centos:7

# nesse caso, fera feito somente o download da imagem
# e nao sera criado o container baseado no ubuntu.
#
$ docker image pull ubuntu:latest

# visualizar quais sao as imagens que estao salvas localmente
#
# docker images

# fazer o download de uma imagem mas nao inicializar o mesmo
#
$ docker container create debian

# executando o container em modo interativo (-it) e acessar o terminal do container
#
$ docker container run -it ubuntu /bin/bash
$ exit

# teclas para sair do container e manter ele em execucao
#
Ctrl+p Ctrl+q ou Ctrl+pq

# teclas para encerrar o container
#
Ctrl+d

# visualizar o status dos container que estao ativos
# obter o [CONTAINER ID] dos container
#
$ docker container ls

# visualizar o status dos container, seja eles ativos, inativos
# ou em backgroud
#
$ docker container ls -a

# inicalizar um container
#
$ docker container start [CONTAINER ID]

# pausar um container
#
$ docker container pause [CONTAINER ID]

# despausar um container
#
$ docker container unpause [CONTAINER ID]

# reinicializar um container
# no - nao reinicializa
# always -  sempre sera reinicializado
# on-failore:X - numero de vezes em que o container tentara ser
# reinicializado
#
$ docker container restart [CONTAINER ID]
$ docker container run -ti --restart=on-failure:3 debian

# status/estatistica (consumo dos recursos) do docker
#
$ docker containe stats [CONTAINER ID]

# log do container
#
$ docker container logs [CONTAINER ID]
$ docker container logs -f [CONTAINER ID]

# eventos
#
$ docker events

# processos que estao em execussao dentro do container
#
$ docker container top [CONTAINER ID]

# voltar para o container
#
$ docker container attach [CONTAINER ID]

# parar todos os containers
#
$ docker container stop $( docker ps -a -q)

# remover todos os containers
#
$ docker container rm $( docker ps -a -q)

# informacoes sobre o container (memoria, rede, cpu)
#
$ docker container inspect [CONTAINER ID]
