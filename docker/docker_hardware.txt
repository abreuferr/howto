#: Title : Docker e hardware
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : como controlar o hardware de um container
#: Options :
#: Reference :

3. HARDWARE
3.1. GERAL
# exibir estatisticas sobre o container
#
$ docker container stats [CONTAINER ID]

# processos que estao em execussao
#
$ docker container top [CONTAINER ID]

# log do que esta ocorrendo dentro do container
#
$ docker container log [CONTAINER ID]

3.2. MEMORIA
# executar uma imagem DEBIAN e cujo nome eh MEMTEST
#
$ docker container run -ti --name memtest debian
            "Memory": 0,
            "CpusetMems": "",
            "KernelMemory": 0,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": -1,

# definir a quantidade de memoria de um container (-m 512m)
#
$ docker container run -ti -m 512m --name new_memtest debian
	"Memory": 536870912,

3.3. CPU
# criacao de um container e definindo a quantidade de cpu a ser compartilhada
#
$ docker container run -ti --cpu-shares 1024 --name cputest debian
	"CpuShares": 1024,

# criacao de um container e definindo a quantidade de nucleos de uma cpu
#
$ docker container run -ti --cpus="2.0" ubuntu /bin/bash
	"NanoCpus": 2000000000,

# alterar a quantidade de memoria e cpu
# memoria   - de 1024mb foi para 256mb
# cpu       - de 0 para 512
#
$ docker container update -m 256m --cpu-shares 1024 cputest
            "Memory": 268435456,
            "CpusetMems": "",
            "KernelMemory": 0,
            "MemoryReservation": 0,
            "MemorySwap": 1073741824,
            "MemorySwappiness": -1,

$ docker inspect cputest | grep -i cpu
        "Name": "/cputest",
            "CpuShares": 512,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "CpuCount": 0,
            "CpuPercent": 0,
